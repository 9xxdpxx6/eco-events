/*=================================*/
/*        Fake Mock Server         */
/*=================================*/

import express from 'express';
import cors from 'cors';
import jsonServer from 'json-server';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
const server = express();
server.use(cors());

// –ò—Å–ø–æ–ª—å–∑—É–µ–º express.json() —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
server.use('/api/auth', express.json());
server.use('/api/events/:id/join', express.json());
server.use('/api/events/:id/leave', express.json());
server.use('/api/profile', express.json());

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è auth
server.post('/api/auth/login', (req, res) => {
    const { email, password } = req.body;

    // –ß–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ db.json
    const dbPath = path.join(__dirname, 'db.json');
    const dbData = JSON.parse(fs.readFileSync(dbPath, 'utf8'));
    const user = dbData.users.find(u => u.email === email && u.password === password);

    if (!user) {
        return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    res.json({ 
        token: 'fake-jwt-token', 
        message: 'authorized',
        user: {
            id: user.id,
            email: user.email,
            type: user.type
        }
    });
});

server.post('/api/auth/register', (req, res) => {
    res.status(201).json({ message: 'User created' });
});

server.get('/api/auth/me', (req, res) => {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token || token !== 'fake-jwt-token') {
        return res.status(401).json({ error: 'Unauthorized' });
    }
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ db.json
    try {
        const dbPath = path.join(__dirname, 'db.json');
        const dbData = JSON.parse(fs.readFileSync(dbPath, 'utf8'));
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email 'qwe'
        const user = dbData.users.find(u => u.email === 'qwe');
        
        if (user) {
            console.log('üìã –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ db.json:', user);
            res.json({ 
                user: {
                    id: user.id,
                    email: user.email,
                    type: user.type
                }
            });
        } else {
            // Fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            res.json({ 
                user: {
                    id: 1, 
                    email: 'qwe', 
                    type: 'volunteer' 
                }
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è db.json:', error);
        // Fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        res.json({ 
            user: {
                id: 1, 
                email: 'qwe', 
                type: 'volunteer' 
            }
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
server.post('/api/events/:id/join', (req, res) => {
    const eventId = parseInt(req.params.id);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ${eventId}`);
    
    res.json({ 
        success: true, 
        message: '–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        eventId: eventId
    });
});

server.post('/api/events/:id/leave', (req, res) => {
    const eventId = parseInt(req.params.id);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ ${eventId}`);
    
    res.json({ 
        success: true, 
        message: '–£—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ',
        eventId: eventId
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
server.get('/api/profile', (req, res) => {
    res.json({
        id: 1,
        email: 'volunteer@test.com',
        type: 'volunteer'
    });
});

server.get('/api/profile/statistics', (req, res) => {
    res.json({
        eventsAttended: 5,
        points: 120,
        hoursVolunteered: 25,
        eventsCreated: 0,
        totalParticipants: 0,
        rating: 0
    });
});

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
server.get('/api/events', (req, res) => {
    const sort = req.query.sort || 'newest';
    const q = (req.query.q || '').toString().toLowerCase();
    const dbPath = path.join(__dirname, 'db.json');
    const dbData = JSON.parse(fs.readFileSync(dbPath, 'utf8'));
    let events = dbData.events.slice();

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (q) {
        events = events.filter(event =>
            (event.title && event.title.toLowerCase().includes(q)) ||
            (event.description && event.description.toLowerCase().includes(q)) ||
            (event.organization && event.organization.toLowerCase().includes(q)) ||
            (event.location && event.location.toLowerCase().includes(q))
        );
    }

    switch (sort) {
        case 'oldest':
            events.sort((a, b) => new Date(a.date) - new Date(b.date));
            break;
        case 'participants':
            events.sort((a, b) => (b.participantsCount || 0) - (a.participantsCount || 0));
            break;
        case 'title':
            events.sort((a, b) => a.title.localeCompare(b.title, 'ru'));
            break;
        case 'newest':
        default:
            events.sort((a, b) => new Date(b.date) - new Date(a.date));
            break;
    }
    res.json(events);
});

// –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –º–æ–Ω—Ç–∏—Ä—É–µ–º json-server!
const jsonServerApp = jsonServer.create();
const router = jsonServer.router(path.join(__dirname, 'db.json'));
const middlewares = jsonServer.defaults();

jsonServerApp.use(middlewares);
jsonServerApp.use(router);

server.use('/api', jsonServerApp);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3000;
server.listen(PORT, () => {
    console.log(`Mock API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
    console.log('- POST /api/auth/login');
    console.log('- POST /api/auth/register');
    console.log('- GET /api/auth/me');
    console.log('- POST /api/events/:id/join');
    console.log('- POST /api/events/:id/leave');
    console.log('- GET /api/profile');
    console.log('- GET /api/profile/statistics');
    console.log('- GET /api/events');
    console.log('- REST API –¥–ª—è events –ø–æ–¥ /api/');
});